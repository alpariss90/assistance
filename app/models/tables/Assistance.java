/*
 * This file is generated by jOOQ.
*/
package models.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import models.Indexes;
import models.Keys;
import models.Public;
import models.tables.records.AssistanceRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Assistance extends TableImpl<AssistanceRecord> {

    private static final long serialVersionUID = -941832225;

    /**
     * The reference instance of <code>public.assistance</code>
     */
    public static final Assistance ASSISTANCE = new Assistance();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AssistanceRecord> getRecordType() {
        return AssistanceRecord.class;
    }

    /**
     * The column <code>public.assistance.id</code>.
     */
    public final TableField<AssistanceRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('assistance_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.assistance.motif</code>.
     */
    public final TableField<AssistanceRecord, String> MOTIF = createField("motif", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.assistance.declarant</code>.
     */
    public final TableField<AssistanceRecord, String> DECLARANT = createField("declarant", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.assistance.observations</code>.
     */
    public final TableField<AssistanceRecord, String> OBSERVATIONS = createField("observations", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.assistance.is_close</code>.
     */
    public final TableField<AssistanceRecord, Boolean> IS_CLOSE = createField("is_close", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.assistance.maintenacier</code>.
     */
    public final TableField<AssistanceRecord, String> MAINTENACIER = createField("maintenacier", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.assistance.when_done</code>.
     */
    public final TableField<AssistanceRecord, LocalDateTime> WHEN_DONE = createField("when_done", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>public.assistance.when_close</code>.
     */
    public final TableField<AssistanceRecord, LocalDateTime> WHEN_CLOSE = createField("when_close", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>public.assistance.is_ok</code>.
     */
    public final TableField<AssistanceRecord, Boolean> IS_OK = createField("is_ok", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.assistance.when_ok</code>.
     */
    public final TableField<AssistanceRecord, LocalDateTime> WHEN_OK = createField("when_ok", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>public.assistance.new_create</code>.
     */
    public final TableField<AssistanceRecord, Boolean> NEW_CREATE = createField("new_create", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * Create a <code>public.assistance</code> table reference
     */
    public Assistance() {
        this(DSL.name("assistance"), null);
    }

    /**
     * Create an aliased <code>public.assistance</code> table reference
     */
    public Assistance(String alias) {
        this(DSL.name(alias), ASSISTANCE);
    }

    /**
     * Create an aliased <code>public.assistance</code> table reference
     */
    public Assistance(Name alias) {
        this(alias, ASSISTANCE);
    }

    private Assistance(Name alias, Table<AssistanceRecord> aliased) {
        this(alias, aliased, null);
    }

    private Assistance(Name alias, Table<AssistanceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ASSISTANCE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AssistanceRecord, Long> getIdentity() {
        return Keys.IDENTITY_ASSISTANCE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AssistanceRecord> getPrimaryKey() {
        return Keys.ASSISTANCE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AssistanceRecord>> getKeys() {
        return Arrays.<UniqueKey<AssistanceRecord>>asList(Keys.ASSISTANCE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<AssistanceRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AssistanceRecord, ?>>asList(Keys.ASSISTANCE__ASSISTANCE_DECLARANT_FKEY, Keys.ASSISTANCE__ASSISTANCE_MAINTENACIER_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Assistance as(String alias) {
        return new Assistance(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Assistance as(Name alias) {
        return new Assistance(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Assistance rename(String name) {
        return new Assistance(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Assistance rename(Name name) {
        return new Assistance(name, null);
    }
}
